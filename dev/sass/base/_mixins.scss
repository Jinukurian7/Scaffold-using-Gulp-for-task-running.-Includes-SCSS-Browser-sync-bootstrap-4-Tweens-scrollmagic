// break points 
@mixin bd-xlg {
    @media only screen and (min-width: 1600px) {
        @content;
    }
}

@mixin bd-xlg-bl {
    @media only screen and (max-width: 1589px) {
        @content;
    }
}

@mixin bd-xxl {
    @media screen and (min-width: $screen-xxl) {
        @content;
    }
}

@mixin bd-xxl-bl {
    @media screen and (max-width: $screen-xxl - 1) {
        @content;
    }
}

@mixin bd-xl {
    @media screen and (min-width: $screen-xl) {
        @content;
    }
}

@mixin bd-xl-bl {
    @media screen and (max-width: $screen-xl - 1) {
        @content;
    }
}

@mixin bd-lg {
    @media screen and (min-width: $screen-lg) {
        @content;
    }
}

@mixin bd-lg-bl {
    @media screen and (max-width: $screen-lg - 1) {
        @content;
    }
}

@mixin bd-md {
    @media screen and (min-width: $screen-md) {
        @content;
    }
}

@mixin bd-md-bl {
    @media screen and (max-width: $screen-md - 1) {
        @content;
    }
}

@mixin bd-tab {
    @media screen and (min-width: $screen-tab) {
        @content;
    }
}

@mixin bd-tab-bl {
    @media screen and (max-width: $screen-tab - 1) {
        @content;
    }
}

@mixin bd-sm {
    @media screen and (min-width: $screen-sm) {
        @content;
    }
}

@mixin bd-sm-bl {
    @media screen and (max-width: $screen-sm - 1) {
        @content;
    }
}

@mixin bd-xs {
    @media screen and (min-width: $screen-xs) {
        @content;
    }
}

@mixin bd-xs-bl {
    @media screen and (max-width: $screen-xs - 1) {
        @content;
    }
}

@mixin bd-sm-md {
    @media screen and (min-width: $screen-sm) and (max-width: $screen-md - 1) {
        @content;
    }
}

@mixin bd-custom-min($width) {
    @media screen and (min-width: $width) {
        @content;
    }
}

@mixin bd-custom-max($width) {
    @media screen and (max-width: $width - 1) {
        @content;
    }
}

@mixin bd-bw($from, $to) {
    @media screen and (min-width: $from) and (max-width: $to - 1) {
        @content;
    }
}

@mixin calculateRem($size, $font-size-root) {
    font-size: ($size / $font-size-root) + rem;
}

@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value==nowrap {
        -ms-flex-wrap: none;
    }
    @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

// transtions and transforms 
@mixin transition($prop) {
    -webkit-transition: #{$prop};
    -moz-transition: #{$prop};
    -ms-transition: #{$prop};
    transition: #{$prop};
}

@mixin transform($prop) {
    -webkit-transform: #{$prop};
    -moz-transform: #{$prop};
    -ms-transform: #{$prop};
    transform: #{$prop};
}

@mixin transform-origin($prop) {
    -webkit-transform-origin: #{$prop};
    -moz-transform-origin: #{$prop};
    -ms-transform-origin: #{$prop};
    transform-origin: #{$prop};
}


@mixin backface-visibility($prop) {
    -webkit-backface-visibility: #{$prop};
    -moz-backface-visibility: #{$prop};
    -ms-backface-visibility: #{$prop};
    backface-visibility: #{$prop};
}

// animations
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}

// backgrounds 
@mixin background-image($image-name, $repeat: false, $pos: false) {
    background-image:url(#{$image-path}/#{$image-name});
    background-repeat: no-repeat;
    @if($repeat) {
        background-repeat: $repeat;
    }
    @if($pos) {
        background-position: $pos;
    }
}

@mixin background-size($size) {
    background-size: $size;
    -webkit-background-size: $size;
    -o-background-size: $size;
    -moz-background-size: $size;
}

@mixin box-shadow($prop) {
    box-shadow: #{$prop};
    -webkit-box-shadow: #{$prop};
    -moz-box-shadow: #{$prop};
}

// Filter

@mixin filter($filter-type,$filter-amount) { 
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}

// Grad and img
@mixin background-gradient-and-image ($fallback, $imgUrl, $background-position-x, $background-position-y, $startColor, $endColor) {
    background: $fallback;
    background: url($imgUrl) $background-position-x $background-position-y no-repeat;
    /* fallback */
    background: url($imgUrl) $background-position-x $background-position-y no-repeat, -webkit-gradient(linear, left top, left bottom, from($startColor) $background-position-x $background-position-y no-repeat, to($endColor));
    /* Saf4+, Chrome */
    background: url($imgUrl) $background-position-x $background-position-y no-repeat, -webkit-linear-gradient(top, $startColor, $endColor);
    /* Chrome 10+, Saf5.1+ */
    background: url($imgUrl) $background-position-x $background-position-y no-repeat, -moz-linear-gradient(top, $startColor, $endColor);
    /* FF3.6+ */
    background: url($imgUrl) $background-position-x $background-position-y no-repeat, -ms-linear-gradient(top, $startColor, $endColor);
    /* IE10 */
    background: url($imgUrl) $background-position-x $background-position-y no-repeat, -o-linear-gradient(top, $startColor, $endColor);
    /* Opera 11.10+ */
    background: url($imgUrl) $background-position-x $background-position-y no-repeat, linear-gradient(top, $startColor, $endColor);
    /* W3C */
}

// Css flex magic
@mixin display-flex() {
    display: -webkit-box;
    display: -moz-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
    -moz-box-direction: reverse;
    -moz-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -moz-box-direction: normal;
    -moz-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
    -moz-box-direction: reverse;
    -moz-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    -moz-box-direction: normal;
    -moz-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin flex-prop($prop-name, $prop-value) {
    -webkit-#{$prop-name}: $prop-value;
    -ms-#{$prop-name}: $prop-value;
    -moz-#{$prop-name}: $prop-value;
    #{$prop-name}: $prop-value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}
@mixin flex-value($value) {
    -webkit-box-flex: $value;
    -moz-box-flex: $value;
    -webkit-flex: $value;
    -ms-flex: $value;
    flex: $value;
}

//Center-align a block level element
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction)==false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

@mixin placeholder($color) {
    // Firefox
    &::-moz-placeholder {
        color: $color;
        opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
    }
    &:-ms-input-placeholder {
        color: $color;
        opacity: 1;
    } // Internet Explorer 10+
    &::-webkit-input-placeholder {
        color: $color;
        opacity: 1;
    } // Safari and Chrome
    &::-ms-input-placeholder {
        color: $color;
        opacity: 1;
    }
}

@mixin clearfix {
  &:after,&:before {
    content: "";
    display: table;
    clear: both;
  }
}
